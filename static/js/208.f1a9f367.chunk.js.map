{"version":3,"file":"static/js/208.f1a9f367.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ListContacts/ListContacts.styled.js","components/ListContacts/ListContacts.jsx","components/ContactSection/ContactSection.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector([selectContacts, selectFilter], (contactsName, contactsFilter) => {\n    return contactsName.filter(contact => {\n        if (contactsFilter.trim() === '') {\n            return contact;\n        }\n        return contact.name.toLowerCase().includes(contactsFilter.toLowerCase());\n    });\n})\n","import { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .required('This name is required'),\n  number: Yup.string()\n    .matches(\n      /(?:([+]\\d{1,4})[-.\\s]?)?(?:[(](\\d{1,3})[)][-.\\s]?)?(\\d{1,4})[-.\\s]?(\\d{1,4})[-.\\s]?(\\d{1,9})/g,\n      'It`s wrong phone!'\n    )\n    .min(5, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('This number is required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={(value, actions) => {\n        if (listContacts.some(item => item.name.trim() === value.name.trim())) {\n          alert(`${value.name} is already in contacts`);\n        } else {\n          dispatch(addContact(value));\n        }\n        actions.resetForm();\n      }}\n    >\n      {props => (\n        <Box\n          w=\"50%\"\n          marginLeft=\"auto\"\n          marginRight=\"auto\"\n          paddingTop=\"40px\"\n        >\n          <Form>\n            <Field name=\"name\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel>Name</FormLabel>\n                  <Input\n                    {...field}\n                    type=\"text\"\n                    name=\"name\"\n                    borderRadius=\"full\"\n                    focusBorderColor=\"black\"\n                  />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"number\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.number && form.touched.number}\n                >\n                  <FormLabel>Number</FormLabel>\n                  <Input\n                    {...field}\n                    type=\"tel\"\n                    name=\"number\"\n                    borderRadius=\"full\"\n                    focusBorderColor=\"black\"\n                  />\n                  <FormErrorMessage>{form.errors.number}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n            <Button\n              marginTop=\"3\"\n              colorScheme=\"teal\"\n              variant=\"outline\"\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Form>\n        </Box>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from \"styled-components\";\n\nexport const ListContact = styled.ul`\n list-style: none;\n display:flex;\n flex-wrap:wrap;\n gap: 20px;\n justify-content:center;\n margin-top:30px;\n `\nexport const ItemContact = styled.li`\ndisplay:flex;\ntext-align:center;\nalign-items:center;\nwidth:400px;\npadding:6px 10px;\nbox-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\nborder-radius: ${p => p.theme.spacing(2)};\nborder: 1px solid ${p => p.theme.colors.black};\nfont-weight: 500;\nfont-size: 16px;\nline-height: 1;\nletter-spacing: 0.02em;\nmargin-bottom: 10px;\n `","import { useDispatch, useSelector } from 'react-redux';\nimport { ItemContact, ListContact } from './ListContacts.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button, Text } from '@chakra-ui/react';\n\n\nexport const ListContacts = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  return (\n\n    <ListContact>\n      {visibleContacts.map(contact => (\n        <ItemContact  key={contact.id}>\n          <Text as='b' fontSize='22px'>{contact.name}: {contact.number}{' '}</Text>\n          <Button marginLeft='auto' colorScheme='teal' variant='outline'\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </Button>\n        </ItemContact>\n      ))}\n    </ListContact>\n\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { statusFilter } from 'redux/filterSlice';\nimport { Box, FormLabel, Heading, Input} from '@chakra-ui/react';\nimport { ListContacts } from 'components/ListContacts/ListContacts';\n\nexport const ContactSection = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Box w=\"60%\" marginLeft=\"auto\" marginRight=\"auto\" paddingTop=\"30px\">\n        <Heading fontSize=\"40px\" textAlign=\"center\">\n          Contacts\n        </Heading>\n        <FormLabel>Find contacts by name</FormLabel>\n        <Input\n          focusBorderColor=\"black\"\n          borderRadius=\"full\"\n          type=\"text\"\n          onChange={e => dispatch(statusFilter(e.target.value))}\n        />\n      </Box>\n      <ListContacts/>\n    </>\n  );\n};\n","import { Text } from \"@chakra-ui/react\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport { ContactSection } from \"components/ContactSection/ContactSection\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\n\n\nexport default function Contacts() {\n  const dispatch=useDispatch();\n  const isLoading =useSelector(selectIsLoading);\n\n\n  useEffect(()=>{dispatch(fetchContacts())},[dispatch]);\n  return (\n    < > \n    <Helmet>\n      <title>Your contacts</title>\n    </Helmet>\n    <ContactForm/>\n    <Text as='b' marginLeft='30px' >{isLoading && 'Request in progress...'}</Text>\n    <ContactSection/>\n    </>\n  )\n}\n\n\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contactsName","contactsFilter","contact","trim","name","toLowerCase","includes","ContactSchema","Yup","shape","min","max","required","number","matches","dispatch","useDispatch","listContacts","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","value","actions","some","item","alert","concat","addContact","resetForm","children","props","Box","w","marginLeft","marginRight","paddingTop","_jsxs","Form","Field","_ref","field","form","FormControl","isInvalid","errors","touched","FormLabel","Input","_objectSpread","type","borderRadius","focusBorderColor","FormErrorMessage","_ref2","Button","marginTop","colorScheme","variant","ListContact","styled","_templateObject","_taggedTemplateLiteral","ItemContact","_templateObject2","p","theme","spacing","colors","black","ListContacts","visibleContacts","map","Text","as","fontSize","onClick","deleteContact","id","ContactSection","_Fragment","Heading","textAlign","onChange","e","statusFilter","target","Contacts","useEffect","fetchContacts","Helmet","ContactForm"],"sourceRoot":""}