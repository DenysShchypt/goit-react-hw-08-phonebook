{"version":3,"file":"static/js/139.f0e3b99a.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","pages/Register.js","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-error.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { Box, Button, FormControl, FormErrorMessage, FormHelperText, FormLabel, Input } from '@chakra-ui/react';\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch()\n    const [input, setInput] = useState('')\n    const handleInputChange = (e) => setInput(e.target.value)\n    const isError = input === ''\n    const handleSubmit = e => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        dispatch(register({\n            name: form.elements.name.value,\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        }))\n\n        form.reset()\n    }\n\n    return (\n        <Box w='50%' p={4} marginLeft='auto' marginRight='auto' paddingTop='40px'>\n            <form onSubmit={handleSubmit} autoComplete='off'>\n                <FormControl isInvalid={isError}>\n                    <FormLabel>\n                        Name\n                        <Input\n                            type='text'\n                            name='name'\n                            onChange={handleInputChange}\n                            required\n                            borderRadius=\"full\"\n                            focusBorderColor=\"black\" />\n                        {!isError ? (\n                            <FormHelperText>\n                                Enter the name you'd like to receive the newsletter on.\n                            </FormHelperText>\n                        ) : (\n                            <FormErrorMessage>Name is required.</FormErrorMessage>\n                        )}\n                    </FormLabel>\n                </FormControl>\n                <FormControl isInvalid={isError}>\n                    <FormLabel>\n                        Email\n                        <Input type='email'\n                            name='email'\n                            onChange={handleInputChange}\n                            required\n                            borderRadius=\"full\"\n                            focusBorderColor=\"black\" />\n                        {!isError ? (\n                            <FormHelperText>\n                                Enter the email you'd like to receive the newsletter on.\n                            </FormHelperText>\n                        ) : (\n                            <FormErrorMessage>Email is required.</FormErrorMessage>\n                        )}\n                    </FormLabel>\n                </FormControl>\n                <FormControl isInvalid={isError}>\n                    <FormLabel>\n                        Password\n                        <Input \n                        type='password' \n                        name='password' \n                        onChange={handleInputChange} \n                        required \n                        borderRadius=\"full\"\n                        focusBorderColor=\"black\" />\n                        {!isError ? (\n                            <FormHelperText>\n                                Enter the password you'd like to receive the newsletter on.\n                            </FormHelperText>\n                        ) : (\n                            <FormErrorMessage>Password is required.</FormErrorMessage>\n                        )}\n                    </FormLabel>\n                </FormControl>\n                <Button marginTop='3' colorScheme='teal' variant='outline' type='submit'>Register</Button>\n\n            </form>\n        </Box>\n    )\n}\n\nexport default RegisterForm","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet\";\n\n\n\nexport default function Register(){\n\n  return (\n    <>\n      <Helmet>\n        <title>Register</title>\n      </Helmet>\n      <RegisterForm/>\n    </>\n  )\n}\n\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","input","setInput","handleInputChange","e","target","value","isError","_jsx","Box","w","p","marginLeft","marginRight","paddingTop","children","_jsxs","onSubmit","preventDefault","form","currentTarget","register","name","elements","email","password","reset","autoComplete","FormControl","isInvalid","FormLabel","Input","type","onChange","required","borderRadius","focusBorderColor","FormErrorMessage","FormHelperText","Button","marginTop","colorScheme","variant","Register","_Fragment","Helmet","RegisterForm","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","_createContext3","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","styles","useMultiStyleConfig","_useFormControlProvid","idProp","id","isRequired","isDisabled","isReadOnly","htmlProps","_objectWithoutProperties","_excluded","uuid","useId","concat","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","props2","arguments","length","undefined","forwardedRef","_objectSpread","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_excluded2","className","cx","jsx","chakra","__css","displayName","field","helperText","passedProps","_a","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","jsxs","display","textAlign","FormErrorStylesProvider","useFormErrorStyles","alignItems","text","_className","Icon","icon","fill","d","useFormControl","_useFormControlProps","_b","_c","disabled","readOnly","labelIds","push","join","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","size"],"sourceRoot":""}